from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
import logging
from pathlib import Path
import socket
import json
import uuid
import threading
from zeroconf import ServiceInfo, Zeroconf
import time
import random
import string

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(title="Offline Device Integration System")

# Set up Jinja2 templates
BASE_DIR = Path(__file__).resolve().parent.parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# Create templates directory if it doesn't exist
os.makedirs(BASE_DIR / "templates", exist_ok=True)

# Create static directory if it doesn't exist
os.makedirs(BASE_DIR / "static", exist_ok=True)

# Mount static files directory
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# Generate a unique device ID if not already saved
DEVICE_ID_FILE = BASE_DIR / ".device_id"
if DEVICE_ID_FILE.exists():
    with open(DEVICE_ID_FILE, "r") as f:
        DEVICE_ID = f.read().strip()
else:
    DEVICE_ID = str(uuid.uuid4())
    with open(DEVICE_ID_FILE, "w") as f:
        f.write(DEVICE_ID)

# Store pairing code persistently
PAIRING_CODE_FILE = BASE_DIR / ".pairing_code"

# Generate a random pairing code for initial device pairing
def generate_pairing_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

# Load existing pairing code or generate a new one
if PAIRING_CODE_FILE.exists():
    try:
        with open(PAIRING_CODE_FILE, "r") as f:
            PAIRING_CODE = f.read().strip()
            if not PAIRING_CODE or len(PAIRING_CODE) != 6:  # Validate the loaded code
                PAIRING_CODE = generate_pairing_code()
                with open(PAIRING_CODE_FILE, "w") as f:
                    f.write(PAIRING_CODE)
    except Exception as e:
        logger.error(f"Error loading pairing code: {e}")
        PAIRING_CODE = generate_pairing_code()
        with open(PAIRING_CODE_FILE, "w") as f:
            f.write(PAIRING_CODE)
else:
    PAIRING_CODE = generate_pairing_code()
    with open(PAIRING_CODE_FILE, "w") as f:
        f.write(PAIRING_CODE)

PAIRED_DEVICES = {}  # Store MAC address / device ID of paired devices
PAIRING_FILE = BASE_DIR / ".paired_devices"

# Load any previously paired devices
        # If the device ID is provided and recognized/paired, store the connection
        if device_id and device_id in PAIRED_DEVICES:
            self.active_connections[device_id] = websocket
            logger.info(f"Paired device {device_id} connected. Total connections: {len(self.active_connections)}")
        else:
            # For unpaired/new connections, use websocket object as key temporarily
            temp_id = str(id(websocket))
            self.active_connections[temp_id] = websocket
            logger.info(f"New unpaired connection {temp_id}. Total connections: {len(self.active_connections)}")
        return device_id or temp_id
    
    def disconnect(self, connection_id: str):
        if connection_id in self.active_connections:
            del self.active_connections[connection_id]
            logger.info(f"Connection {connection_id} closed. Total connections: {len(self.active_connections)}")
    
    async def broadcast(self, message_dict: dict, exclude=None):
        message = json.dumps(message_dict)
        for conn_id, connection in self.active_connections.items():
            if exclude != conn_id:
                try:
                    await connection.send_text(message)
                except Exception as e:
                    logger.error(f"Error sending to {conn_id}: {e}")
                    # We'll handle reconnection elsewhere, just log for now
    
    async def send_to_device(self, device_id: str, message_dict: dict):
        if device_id in self.active_connections:
            try:
                await self.active_connections[device_id].send_text(json.dumps(message_dict))
                return True
            except Exception as e:
                logger.error(f"Error sending to device {device_id}: {e}")
                return False
        return False

manager = ConnectionManager()

# mDNS Service setup
def setup_mdns():
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    port = 8000  # Our FastAPI server port
    
    logger.info(f"Setting up mDNS with IP: {local_ip}")
    
    # Create ServiceInfo object
    service_info = ServiceInfo(
        "_sic-sync._tcp.local.",  # Service type
        f"{hostname}-sic-sync._sic-sync._tcp.local.",  # Service name
        addresses=[socket.inet_aton(local_ip)],
        port=port,
        weight=0,
        priority=0,
        properties={
            b'deviceid': DEVICE_ID.encode('utf-8'),
            b'type': b'linux-server',
            b'hostname': hostname.encode('utf-8'),
        }
    )
    
    zeroconf = Zeroconf()
    zeroconf.register_service(service_info)
    logger.info(f"mDNS service registered: {service_info.name}")
    
    # Return zeroconf and service_info for later unregistration
    return zeroconf, service_info

# Initialize mDNS on server startup
@app.on_event("startup")
async def startup_event():
    # Start mDNS service in a separate thread to avoid blocking
    threading.Thread(target=setup_mdns, daemon=True).start()
    logger.info(f"Server started with device ID: {DEVICE_ID}")
    logger.info(f"Initial pairing code: {PAIRING_CODE}")

@app.get("/")
async def get_home(request: Request):
    """Serve the homepage with WebSocket client"""
    hostname = socket.gethostname()
    return templates.TemplateResponse("index.html", {
        "request": request,
        "device_id": DEVICE_ID,
        "hostname": hostname,
        "pairing_code": PAIRING_CODE,
    })

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for real-time communication"""
    connection_id = await manager.connect(websocket)
    
    try:
        while True:
            raw_data = await websocket.receive_text()
            data = json.loads(raw_data)
            logger.debug(f"Message received: {data}")
            
            # Handle message based on its type
            if data.get("type") == "pairing_request":
                await handle_pairing(websocket, connection_id, data)
            elif data.get("type") == "clipboard_sync":
                await handle_clipboard(websocket, connection_id, data)
            elif data.get("type") == "notification":
                await handle_notification(connection_id, data)
            elif data.get("type") == "file_transfer_init":
                await handle_file_transfer_init(websocket, connection_id, data)
            elif data.get("type") == "file_transfer_chunk":
                await handle_file_transfer_chunk(connection_id, data)
            elif data.get("type") == "ping":
                # Handle heartbeat ping
                await websocket.send_text(json.dumps({"type": "pong"}))
            else:
                logger.warning(f"Unknown message type: {data.get('type')}")
                
    except WebSocketDisconnect:
        manager.disconnect(connection_id)
    except Exception as e:
        logger.error(f"WebSocket error: {e}")
        manager.disconnect(connection_id)

# Handler functions for different message types
async def handle_pairing(websocket, connection_id, data):
    """Handle device pairing requests"""
    global PAIRING_CODE
    if data.get("code") == PAIRING_CODE:
        device_id = data.get("device_id")
        device_name = data.get("device_name", "Unknown Device")
        device_type = data.get("device_type", "unknown")
        
        # Store the pairing and save
        PAIRED_DEVICES[device_id] = {
            "name": device_name,
            "type": device_type,
            "paired_at": time.time()
        }
        save_paired_devices()
        
        # Send confirmation and rotate pairing code
        await websocket.send_text(json.dumps({
            "type": "pairing_response",
            "success": True,
            "message": "Pairing successful",
            "server_id": DEVICE_ID,
            "server_name": socket.gethostname()
        }))
        
        # Generate a new code for security
        PAIRING_CODE = generate_pairing_code()
        logger.info(f"Device {device_name} ({device_id}) paired successfully. New pairing code: {PAIRING_CODE}")
    else:
        await websocket.send_text(json.dumps({
            "type": "pairing_response",
            "success": False,
            "message": "Invalid pairing code"
        }))
        logger.warning(f"Failed pairing attempt from {connection_id}")

async def handle_clipboard(websocket, connection_id, data):
    """Handle clipboard sync messages"""
    # Check if this is from a paired device
    device_id = data.get("device_id")
    if device_id not in PAIRED_DEVICES:
        logger.warning(f"Clipboard sync from unpaired device: {device_id}")
        return
    
    # Set clipboard data locally - will be implemented in clipboard.py
    from .clipboard import set_clipboard_text, get_clipboard_text
    
    text = data.get("text", "")
    if text:
        # Store that we received this text to avoid loop
        manager.clipboard_last_sync = text
        set_clipboard_text(text)
        logger.info(f"Clipboard updated from device {device_id}")

async def handle_notification(connection_id, data):
    """Handle notification messages"""
    # Process notification - will be implemented in notifier.py
    pass

async def handle_file_transfer_init(websocket, connection_id, data):
    """Handle file transfer initialization"""
    # File transfer handling - will be implemented in filetransfer.py
    pass

async def handle_file_transfer_chunk(connection_id, data):
    """Handle file transfer data chunks"""
    # File chunk handling - will be implemented in filetransfer.py
    pass

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)